// SerialPortPoolService/Worker.cs - FIXED pour Sprint 7 Client Demo
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using SerialPortPool.Core.Interfaces;

namespace SerialPortPoolService;

public class Worker : BackgroundService
{
    private readonly IBibWorkflowOrchestrator _orchestrator;
    private readonly IBibConfigurationLoader _configLoader;
    private readonly ILogger<Worker> _logger;

    public Worker(
        IBibWorkflowOrchestrator orchestrator, 
        IBibConfigurationLoader configLoader,
        ILogger<Worker> logger)
    {
        _orchestrator = orchestrator;
        _configLoader = configLoader;
        _logger = logger;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("üöÄ SerialPortPool Service - Sprint 7 Client Demo Mode");
        _logger.LogInformation("üìã Auto-Execution: BIB Workflow + FT4232 Detection + RS232 TEST");
        _logger.LogInformation("=".PadRight(80, '='));
        
        // D√©lai de d√©marrage pour laisser les services s'initialiser
        await Task.Delay(5000, stoppingToken);
        
        try
        {
            // ‚úÖ √âTAPE 1: Configuration du loader avec le bon chemin
            var configPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Configuration", "client-demo.xml");
            _configLoader.SetDefaultConfigurationPath(configPath);
            
            _logger.LogInformation("üìÑ Configuration path set: {ConfigPath}", configPath);
            
            // ‚úÖ √âTAPE 2: V√©rification de la configuration
            if (!File.Exists(configPath))
            {
                _logger.LogError("‚ùå Client demo configuration not found: {ConfigPath}", configPath);
                _logger.LogError("üí° Please ensure client-demo.xml exists in Configuration folder");
                return;
            }
            
            _logger.LogInformation("üìã Executing Client Production Workflow...");
            _logger.LogInformation("üîç BIB: client_demo");
            _logger.LogInformation("üîß UUT: production_uut");
            _logger.LogInformation("üìç Port: 1 (auto-discover)");
            _logger.LogInformation("üè≠ Client: PRODUCTION_CLIENT");
            
            // ‚úÖ √âTAPE 3: Ex√©cution du workflow client
            var result = await _orchestrator.ExecuteBibWorkflowAsync(
                bibId: "client_demo",
                uutId: "production_uut", 
                portNumber: 1,
                clientId: "PRODUCTION_CLIENT",
                cancellationToken: stoppingToken
            );
            
            // ‚úÖ √âTAPE 4: Affichage des r√©sultats client-ready
            LogClientDemoResults(result);
            
            if (result.Success)
            {
                _logger.LogInformation("üéâ CLIENT DEMO COMPLETED SUCCESSFULLY!");
                _logger.LogInformation("‚úÖ Service ready for production deployment");
            }
            else
            {
                _logger.LogError("‚ùå CLIENT DEMO FAILED - See details above");
                _logger.LogError("üîß Check hardware connections and configuration");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "üí• Client Demo Exception");
            _logger.LogError("üîß Troubleshooting checklist:");
            _logger.LogError("   ‚Ä¢ Verify FT4232 device is connected");
            _logger.LogError("   ‚Ä¢ Check dummy UUT is running on correct port");
            _logger.LogError("   ‚Ä¢ Ensure client-demo.xml configuration exists");
            _logger.LogError("   ‚Ä¢ Verify no other software is using the serial port");
        }
        
        // Garder le service en marche pour monitoring
        _logger.LogInformation("‚è≥ Service continuing to run for monitoring...");
        while (!stoppingToken.IsCancellationRequested)
        {
            await Task.Delay(60000, stoppingToken); // Check every minute
        }
        
        _logger.LogInformation("üõë Client Demo Service shutting down");
    }
    
    private void LogClientDemoResults(object result)
    {
        // Utilisation de r√©flexion pour acc√©der aux propri√©t√©s
        var resultType = result.GetType();
        
        try
        {
            var successProperty = resultType.GetProperty("Success");
            var isSuccess = successProperty?.GetValue(result) as bool? ?? false;
            
            _logger.LogInformation("üìä =".PadRight(50, '='));
            _logger.LogInformation("üìä CLIENT DEMO RESULTS");
            _logger.LogInformation("üìä =".PadRight(50, '='));
            
            if (isSuccess)
            {
                _logger.LogInformation("üéâ OVERALL STATUS: ‚úÖ SUCCESS");
                
                // Phase results
                var startResult = resultType.GetProperty("StartResult")?.GetValue(result);
                var testResult = resultType.GetProperty("TestResult")?.GetValue(result);
                var stopResult = resultType.GetProperty("StopResult")?.GetValue(result);
                
                _logger.LogInformation("üìã PHASE RESULTS:");
                _logger.LogInformation("   üîã Start Phase: {Result}", GetPhaseResult(startResult));
                _logger.LogInformation("   üß™ Test Phase: {Result}", GetPhaseResult(testResult));  
                _logger.LogInformation("   üîå Stop Phase: {Result}", GetPhaseResult(stopResult));
                
                // Timing info
                var durationProperty = resultType.GetProperty("Duration");
                if (durationProperty?.GetValue(result) is TimeSpan duration)
                {
                    _logger.LogInformation("‚è±Ô∏è Total Duration: {Duration:F1} seconds", duration.TotalSeconds);
                }
                
                // Port info
                var physicalPortProperty = resultType.GetProperty("PhysicalPort");
                var physicalPort = physicalPortProperty?.GetValue(result) as string;
                if (!string.IsNullOrEmpty(physicalPort))
                {
                    _logger.LogInformation("üîå Port Used: {Port}", physicalPort);
                }
                
                // Protocol info
                var protocolProperty = resultType.GetProperty("ProtocolName");
                var protocol = protocolProperty?.GetValue(result) as string;
                if (!string.IsNullOrEmpty(protocol))
                {
                    _logger.LogInformation("üì° Protocol: {Protocol}", protocol.ToUpper());
                }
                
                _logger.LogInformation("üè≠ Device Detection: AUTO (FT4232 Discovery)");
                _logger.LogInformation("üéØ CLIENT REQUIREMENTS: FULLY SATISFIED");
            }
            else
            {
                _logger.LogError("‚ùå OVERALL STATUS: FAILED");
                
                var errorProperty = resultType.GetProperty("ErrorMessage");
                var errorMessage = errorProperty?.GetValue(result) as string;
                
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    _logger.LogError("üí¨ Error Details: {Error}", errorMessage);
                }
                
                _logger.LogError("üîß TROUBLESHOOTING STEPS:");
                _logger.LogError("   ‚Ä¢ Check if FT4232 device is properly connected");
                _logger.LogError("   ‚Ä¢ Verify dummy UUT is running: python dummy_uut.py --port COM8");
                _logger.LogError("   ‚Ä¢ Ensure no other software is using the serial ports");
                _logger.LogError("   ‚Ä¢ Check client-demo.xml configuration file");
                _logger.LogError("   ‚Ä¢ Verify port mapping in BIB configuration");
            }
            
            _logger.LogInformation("üìä =".PadRight(50, '='));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error displaying results");
            _logger.LogInformation("Raw result: {Result}", result.ToString());
        }
    }
    
    private string GetPhaseResult(object? phaseResult)
    {
        if (phaseResult == null) return "‚ùì UNKNOWN";
        
        try
        {
            var successProperty = phaseResult.GetType().GetProperty("IsSuccess");
            var isSuccess = successProperty?.GetValue(phaseResult) as bool? ?? false;
            return isSuccess ? "‚úÖ SUCCESS" : "‚ùå FAILED";
        }
        catch
        {
            return "‚ùì UNKNOWN";
        }
    }
}